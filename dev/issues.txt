 PRIORITIZED FAILURE CATEGORIES
  1) Response Object Structure Mismatch | ImpactScore=0.5 | Confidence=high
     Root cause (concise): Inconsistent response object structure from backend connectors to the
  response_adapters.py and chat_controller.py, leading to missing content attribute or incorrect type for
  streaming responses.
     Affected dependent code (calling → called):
        - src/core/app/controllers/chat_controller.py:handle_chat_completion:66
        - src/core/transport/fastapi/response_adapters.py:domain_response_to_fastapi:108
        - src/core/transport/fastapi/response_adapters.py:to_fastapi_response:38
        - tests/regression/test_chat_completion_regression.py:TestChatCompletionRegression::test_basic_chat_comp
          letion
        - tests/regression/test_chat_completion_regression.py:TestChatCompletionRegression::test_streaming_chat_
          completion
        - tests/regression/test_chat_completion_regression.py::TestChatCompletionRegression::test_command_proces
          sing
        - tests/unit/chat_completions_tests/test_basic_proxying.py::test_basic_request_proxying_non_streaming
        - tests/unit/chat_completions_tests/test_basic_proxying.py::test_basic_request_proxying_streaming
        - tests/unit/chat_completions_tests/test_multimodal_cross_protocol.py::test_openai_frontend_to_gemini_ba
          ckend_multimodal
        - tests/unit/gemini_connector_tests/test_streaming_success.py::test_chat_completions_streaming_success
        - tests/unit/gemini_connector_tests/test_temperature_handling.py::TestGeminiTemperatureHandling::test_te
          mperature_streaming_request
        - tests/unit/openai_connector_tests/test_streaming_response.py::test_streaming_response_async_iterator
        - tests/unit/openai_connector_tests/test_streaming_response.py::test_streaming_response_sync_iterator
        - tests/unit/openai_connector_tests/test_streaming_response.py::test_streaming_response_coroutine
        - tests/unit/openrouter_connector_tests/test_non_streaming_success.py::test_chat_completions_non_streami
          ng_success
        - tests/unit/openrouter_connector_tests/test_streaming_success.py::test_chat_completions_streaming_succe
          ss
        - tests/unit/test_qwen_oauth_connector.py::TestQwenOAuthConnectorUnit::test_chat_completions_success
        - tests/unit/test_qwen_oauth_tool_calling.py::TestQwenOAuthToolCallingUnit::test_chat_completions_with_t
          ools
        - tests/unit/test_qwen_oauth_tool_calling.py::TestQwenOAuthToolCallingUnit::test_streaming_with_tool_cal
          ls
        - tests/unit/test_qwen_oauth_tool_calling.py::TestQwenOAuthToolCallingUnit::test_multi_turn_tool_convers
          ation
        - tests/unit/zai_connector_tests/test_domain_to_connector.py::test_chat_completions_streaming
        - tests/unit/test_response_shape.py::test_extract_response_content_with_dict
        - tests/unit/test_response_shape.py::test_extract_response_content_with_object_choices
     Estimated tests fixed if this category is resolved: 19
     Evidence/derivation:
        - Tests currently failing due to this category (IDs/patterns):
          - tests/regression/test_chat_completion_regression.py::TestChatCompletionRegression::test_basic_chat_c
            ompletion
          - tests/regression/test_chat_completion_regression.py::TestChatCompletionRegression::test_streaming_ch
            at_completion
          - tests/regression/test_chat_completion_regression.py::TestChatCompletionRegression::test_command_proc
            essing
          - tests/unit/chat_completions_tests/test_basic_proxying.py::test_basic_request_proxying_non_streaming
          - tests/unit/chat_completions_tests/test_basic_proxying.py::test_basic_request_proxying_streaming
          - tests/unit/chat_completions_tests/test_multimodal_cross_protocol.py::test_openai_frontend_to_gemini_
            backend_multimodal
          - tests/unit/gemini_connector_tests/test_streaming_success.py::test_chat_completions_streaming_success
          - tests/unit/gemini_connector_tests/test_temperature_handling.py::TestGeminiTemperatureHandling::test_
            temperature_streaming_request
          - tests/unit/openai_connector_tests/test_streaming_response.py::test_streaming_response_async_iterator
          - tests/unit/openai_connector_tests/test_streaming_response.py::test_streaming_response_sync_iterator
          - tests/unit/openai_connector_tests/test_streaming_response.py::test_streaming_response_coroutine
          - tests/unit/openrouter_connector_tests/test_non_streaming_success.py::test_chat_completions_non_strea
            ming_success
          - tests/unit/openrouter_connector_tests/test_streaming_success.py::test_chat_completions_streaming_suc
            cess
          - tests/unit/test_qwen_oauth_connector.py::TestQwenOAuthConnectorUnit::test_chat_completions_success
          - tests/unit/test_qwen_oauth_tool_calling.py::TestQwenOAuthToolCallingUnit::test_chat_completions_with
            _tools
          - tests/unit/test_qwen_oauth_tool_calling.py::TestQwenOAuthToolCallingUnit::test_streaming_with_tool_c
            alls
          - tests/unit/test_qwen_oauth_tool_calling.py::TestQwenOAuthToolCallingUnit::test_multi_turn_tool_conve
            rsation
          - tests/unit/zai_connector_tests/test_domain_to_connector.py::test_chat_completions_streaming
          - tests/unit/test_response_shape.py::test_extract_response_content_with_dict
          - tests/unit/test_response_shape.py::test_extract_response_content_with_object_choices
        - Why they pass after fix: By standardizing the response types and ensuring the content attribute is
          always accessible and correctly typed, the AttributeError and isinstance failures will be resolved.
     Proposed fix strategy (architecturally aligned):
        - Define clear ResponseEnvelope and StreamingResponseEnvelope classes in src/core/domain/responses.py
          (or similar) that all backend connectors must return.
        - Update all chat_completions methods in src/connectors/*.py to return instances of these new envelope
          classes.
        - Modify src/core/transport/fastapi/response_adapters.py to correctly extract content from these
          envelope classes for both streaming and non-streaming responses.
        - Ensure ChatResponse (if still used) is compatible with the new envelope structure or is phased out.
     Risks/Mitigations:
        - Risk: Extensive changes across multiple files could introduce new bugs if not carefully implemented.
        - Mitigation: Implement changes incrementally, starting with the core ResponseEnvelope and
          StreamingResponseEnvelope definitions, then updating connectors one by one, and finally adapting the
          response_adapters.py. Run targeted tests after each step.

  2) Command Processing and Session State | ImpactScore=0.33 | Confidence=high
     Root cause (concise): Inconsistent command parsing, incorrect stripping of commands from messages, and
  _handle_backend_and_model being awaited when it returns a tuple.
     Affected dependent code (calling → called):
        - tests/unit/commands/test_unit_set_command.py::test_handle_backend_and_model_set_backend
        - tests/unit/commands/test_unit_set_command.py::test_handle_backend_and_model_set_model
        - tests/unit/commands/test_unit_set_command.py::test_handle_backend_and_model_set_both
        - tests/unit/proxy_logic_tests/test_process_commands_in_messages.py::TestProcessCommandsInMessages::te
          st_set_command_prefix_variants (all 3 variants)
        - tests/unit/proxy_logic_tests/test_process_commands_in_messages.py::TestProcessCommandsInMessages::te
          st_unset_command_prefix
        - tests/unit/proxy_logic_tests/test_process_commands_in_messages.py::TestProcessCommandsInMessages::te
          st_set_command_with_multiple_parameters_and_prefix
        - tests/unit/proxy_logic_tests/test_process_text_for_commands.py::TestProcessTextForCommands::test_set
          _interactive_mode
        - tests/unit/proxy_logic_tests/test_process_text_for_commands.py::TestProcessTextForCommands::test_set
          _redact_api_keys_flag
        - tests/unit/core/test_request_processor.py::test_process_request_with_commands
        - tests/unit/core/test_request_processor.py::test_process_command_only_request
     Estimated tests fixed if this category is resolved: 10
     Evidence/derivation: AssertionError on message content and TypeError for await on tuple.
     Proposed fix strategy (architecturally aligned):
        - Correct the _handle_backend_and_model method in SetCommand to be an async function if it performs
          awaitable operations, or remove await if it's not.
        - Refine the command parsing logic to ensure commands are correctly identified and removed from the
          message content.
        - Ensure session state updates are correctly reflected after command execution.
     Risks/Mitigations:
        - Risk: Incorrect command parsing can lead to unexpected behavior or security vulnerabilities.
        - Mitigation: Thoroughly test all command variations and edge cases.

  3) Qwen OAuth Integration | ImpactScore=0.32 | Confidence=medium
     Root cause (concise): Issues with Qwen OAuth token refresh, header handling, and inconsistent return
  types from chat_completions, leading to authentication errors and type mismatches.
     Affected dependent code (calling → called):
        - src/connectors/qwen_oauth.py
        - tests/unit/test_qwen_oauth_authentication.py::TestQwenOAuthAuthentication::test_chat_completion_toke
          n_refresh_failure
        - tests/unit/test_qwen_oauth_authentication.py::TestQwenOAuthAuthentication::test_get_headers_no_token
        - tests/unit/test_qwen_oauth_connector.py::TestQwenOAuthConnectorUnit::test_get_headers_no_token
        - tests/unit/test_qwen_oauth_connector.py::TestQwenOAuthConnectorUnit::test_chat_completions_token_ref
          resh_failure
        - tests/unit/test_qwen_oauth_connector.py::TestQwenOAuthConnectorUnit::test_chat_completions_exception
          _handling
        - tests/unit/test_qwen_oauth_enhanced_error_handling.py::TestQwenOAuthEnhancedErrorHandling::test_chat
          _completions_generic_error_handling
        - tests/unit/test_qwen_oauth_enhanced_error_handling.py::TestQwenOAuthEnhancedErrorHandling::test_http
          _exception_passthrough
        - tests/unit/test_qwen_oauth_enhanced_error_handling.py::TestQwenOAuthEnhancedErrorHandling::test_chat
          _completions_refresh_token_failure
        - tests/unit/test_qwen_oauth_tool_calling.py::TestQwenOAuthToolCallingUnit::test_chat_completions_tool
          _choice_none
        - tests/unit/test_qwen_oauth_tool_calling.py::TestQwenOAuthToolCallingUnit::test_chat_completions_spec
          ific_tool_choice
        - tests/unit/test_qwen_oauth_tool_calling.py::TestQwenOAuthToolCallingUnit::test_tool_calling_error_ha
          ndling
        - tests/unit/test_qwen_oauth_tool_calling_enhanced.py::TestQwenOAuthToolCallingEnhanced::test_tool_cal
          ling_error_handling
     Estimated tests fixed if this category is resolved: 13
     Evidence/derivation: Cluster of failures related to Qwen OAuth, AuthenticationError, TypeError: cannot
  unpack non-iterable ResponseEnvelope object, and Failed: DID NOT RAISE HTTPException.
     Proposed fix strategy (architecturally aligned):
        - Review and correct the OAuth token refresh mechanism and credential handling.
        - Ensure chat_completions in QwenOAuthConnector returns ResponseEnvelope or StreamingResponseEnvelope
          consistently.
        - Verify that HTTPException is correctly raised and propagated.
        - Debug tool calling related issues.
     Risks/Mitigations:
        - Risk: OAuth is security-sensitive; errors can lead to authentication bypass or denial of service.
        - Mitigation: Focus on security best practices and thorough testing of the authentication flow.

  4) Async Mocking/DI Issues | ImpactScore=0.195 | Confidence=medium
     Root cause (concise): MagicMock objects are being awaited directly, or initialize_backend_for_test is not
   correctly handling asynchronous operations when setting up backends for tests.
     Affected dependent code (calling → called):
        - src/core/services/backend_service.py:_get_or_create_backend:491
        - tests/conftest.py:get_backend_instance:260
        - tests/conftest.py:initialize_backend_for_test:300
        - tests/unit/chat_completions_tests/test_commands_disabled.py::test_commands_ignored
        - tests/unit/chat_completions_tests/test_error_handling.py::test_invalid_model_noninteractive
        - tests/unit/chat_completions_tests/test_session_history.py::test_session_records_proxy_and_backend_in
          teractions
        - tests/unit/chat_completions_tests/test_session_history.py::test_session_records_streaming_placeholde
          r
     Estimated tests fixed if this category is resolved: 5
     Evidence/derivation: TypeError: object MagicMock can't be used in 'await' expression.
     Proposed fix strategy (architecturally aligned):
        - Ensure AsyncMock is used correctly for awaitable methods in tests.
        - Verify that mocked async methods return awaitable objects.
        - Review the interaction between the DI container and async services in test setups.
     Risks/Mitigations:
        - Risk: Incorrectly mocking async behavior could lead to subtle bugs.
        - Mitigation: Thoroughly test the mocking setup to ensure it accurately reflects real asynchronous
          behavior.

  5) Missing Import / Refactoring Issues | ImpactScore=0.055 | Confidence=high
     Root cause (concise): Missing import for to_streaming_response and _extract_response_content method not
  found in RequestProcessor.
     Affected dependent code (calling → called):
        - src/connectors/gemini.py:323
        - tests/unit/test_response_shape.py::test_extract_response_content_with_dict
        - tests/unit/test_response_shape.py::test_extract_response_content_with_object_choices
     Estimated tests fixed if this category is resolved: 3
     Evidence/derivation: Direct ImportError and AttributeError.
     Proposed fix strategy (architecturally aligned):
        - Locate to_streaming_response and either move it to src/connectors/streaming_utils.py or update the
          import path in src/connectors/gemini.py.
        - Identify the correct method for extracting response content in RequestProcessor or refactor
          _extract_response_content to be a public method or a helper function.
     Risks/Mitigations: Low risk, direct fixes.