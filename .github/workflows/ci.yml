name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10']

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Lint with ruff
      run: |
        python -m ruff check .

    - name: Format with black
      run: |
        python -m black . --check

    - name: Type check with mypy
      run: |
        python -m mypy src

    - name: Test with pytest (coverage)
      run: |
        python -m pytest --cov --cov-branch --cov-report=xml -v tests/unit

    - name: Upload coverage reports to Codecov
      if: ${{ always() }}
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        slug: matdev83/llm-interactive-proxy
        files: ./coverage.xml
        verbose: true
        fail_ci_if_error: false

    - name: Generate tests badge JSON (main/dev)
      if: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev' }}
      run: |
        python - <<'PY'
        import os, xml.etree.ElementTree as ET, json, sys
        p = 'test-results.xml'
        branch = os.environ.get('GITHUB_REF_NAME', '')
        out = 'tests-badge.json' if branch == 'main' else 'tests-dev-badge.json'
        try:
            root = ET.parse(p).getroot()
        except Exception:
            # No report generated; emit zeroed badge
            data = {"schemaVersion":1, "label":"tests", "message":"0 passing", "color":"lightgrey"}
            open(out,'w').write(json.dumps(data))
            sys.exit(0)

        tests = int(root.get('tests') or 0)
        failures = int(root.get('failures') or 0)
        errors = int(root.get('errors') or 0)
        skipped = int(root.get('skipped') or 0)
        if tests == 0:
            for ts in root.iter('testsuite'):
                tests += int(ts.get('tests') or 0)
                failures += int(ts.get('failures') or 0)
                errors += int(ts.get('errors') or 0)
                skipped += int(ts.get('skipped') or 0)
        passed = max(tests - failures - errors - skipped, 0)
        color = 'brightgreen' if failures == 0 and errors == 0 else 'red'
        data = {"schemaVersion":1, "label":"tests", "message":f"{passed} passing", "color":color}
        open(out,'w').write(json.dumps(data))
        PY

    - name: Publish tests badge to badges branch (main/dev)
      if: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev' }}
      run: |
        git config user.name "github-actions"
        git config user.email "github-actions@github.com"
        git fetch origin
        if git show-ref --verify --quiet refs/remotes/origin/badges; then
          git checkout -b badges origin/badges
        else
          git checkout -b badges
        fi
        mkdir -p badges
        if [ "${GITHUB_REF_NAME}" = "main" ]; then
          mv -f tests-badge.json badges/tests.json
          git add badges/tests.json
        else
          mv -f tests-dev-badge.json badges/tests-dev.json
          git add badges/tests-dev.json
        fi
        git commit -m "Update tests badge [skip ci]" || echo "No changes to commit"
        git push origin badges

  integration:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Run integration tests
      env:
        # Set some default dummy values for the integration tests
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY || 'dummy_key' }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY || 'dummy_key' }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY || 'dummy_key' }}
        OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY || 'dummy_key' }}
      run: |
        python -m pytest tests/integration -v

  check-docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install mkdocs mkdocs-material mkdocstrings[python] mdformat

    - name: Autoformat documentation (mdformat)
      run: |
        mdformat README.md CONTRIBUTING.md docs/

    - name: Check documentation formatting
      run: |
        mdformat --check README.md CONTRIBUTING.md docs/

    - name: Test docs building
      if: ${{ hashFiles('mkdocs.yml', 'mkdocs.yaml') != '' }}
      run: |
        mkdocs build --strict
