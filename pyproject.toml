[project]
name = "llm-interactive-proxy"
version = "0.1.0"
description = "A short description of my project." # Pyroma might suggest a longer one, but this is fine for now.
authors = [
    { name = "Mateusz B.", email = "matdev83@github.com" },
]
dependencies = [
    "fastapi",
    "uvicorn[standard]",
    "httpx",
    "python-dotenv",
    "pydantic>=2",
    "openai==1.84.0",
    "tomli",
    "typer",
    "rich",
    "llm-accounting",
    "tiktoken",
    "google-genai",
    "anthropic",
    "structlog",
    "pyyaml",
]
requires-python = ">=3.10"
readme = "README.md"
license = { text = "MIT" } # License specified here
keywords = ["llm", "proxy", "interactive", "api", "ai", "chatgpt", "openai", "gemini", "openrouter"]
urls = { Home = "https://github.com/matdev83/llm-interactive-proxy" } # Example URL
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License", # License classifier added
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Internet :: Proxy Servers",
    "Operating System :: OS Independent", # Common classifier
]

[project.scripts]
restart-service = "dev.tools.restart_service:main"
test-request = "dev.tools.test_request:main"
analyze-logs = "dev.tools.analyze_logs:main"

[project.optional-dependencies]
dev = [
    "pytest",
    "pytest-asyncio",
    "pytest-httpx",
    "ruff",
    "black",
    "requests",
    "bandit",
    "mdformat",
    "types-PyYAML",
    "respx",
    "dependency-injector",
    "vulture",
    "pytest-snapshot",
    "mypy",
]

[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[tool.pytest.ini_options]
pythonpath = "."
addopts = "-v --asyncio-mode=auto -m \"not network\""
# To run integration tests, use: pytest -m integration
markers = [
    "integration: marks tests as integration tests (deselect with '-m \"not integration\"')",
    "unit: marks tests as unit tests",
    "network: marks tests that require network access (deselect with '-m \"not network\"')",
    "regression: marks tests as regression tests",
    "backends: marks tests that need specific backends to be initialized",
    "backend: marks tests that need a specific backend to be initialized",
    "custom_backend_mock: marks tests that use custom backend mocking strategies",
    "httpx_mock: marks tests that use httpx mocking (provided by pytest-httpx plugin)",
    "no_global_mock: marks tests that should not use global mocking",
]
filterwarnings = [
    "ignore::pytest.PytestUnraisableExceptionWarning",
    "ignore::DeprecationWarning",
    "ignore::UserWarning:pydantic._internal._fields",
]
