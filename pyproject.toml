[project]
name = "llm-interactive-proxy"
version = "0.1.0"
description = "A short description of my project." # Pyroma might suggest a longer one, but this is fine for now.
authors = [
    { name = "Mateusz B.", email = "matdev83@github.com" },
]
dependencies = [
    "fastapi",
    "uvicorn[standard]",
    "httpx",
    "python-dotenv",
    "pydantic>=2",
    "openai==1.84.0",
    "tomli",
    "typer",
    "rich",
    "llm-accounting",
    "tiktoken",
    "google-genai",
    "anthropic",
    "structlog",
    "pyyaml",
    "jsonschema>=4.19.0",
    "google-auth>=2.27.0",
    "google-auth-oauthlib>=1.2.0",
    "json-repair",
    "watchdog",
]
requires-python = ">=3.10"
readme = "README.md"
# License per PEP 621: string SPDX identifier
license = "AGPL-3.0-or-later"
keywords = ["llm", "proxy", "interactive", "api", "ai", "chatgpt", "openai", "gemini", "openrouter"]
urls = { Home = "https://github.com/matdev83/llm-interactive-proxy" } # Example URL
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Internet :: Proxy Servers",
    "Operating System :: OS Independent", # Common classifier
]

[project.scripts]
restart-service = "dev.tools.restart_service:main"
test-request = "dev.tools.test_request:main"
analyze-logs = "dev.tools.analyze_logs:main"

[project.optional-dependencies]
dev = [
    "pytest",
    "pytest-asyncio",
    "pytest-cov",
    "pytest-xdist",
    "pytest-httpx",
    "pytest-mock",
    "ruff",
    "black",
    "requests",
    "bandit",
    "mdformat",
    "types-PyYAML",
    "types-jsonschema",
    "types-colorama",
    "respx",
    "dependency-injector",
    "vulture",
    "pytest-snapshot",
    "mypy",
    "hypothesis",
    "xenon",
    "radon",
]

[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.pytest.ini_options]
pythonpath = ["src", "tests"]
testpaths = ["tests"]
addopts = "-v --asyncio-mode=auto -m \"not network and not loop_detection\" --ignore=tests/integration/test_phase2_integration.py --durations=0 --junit-xml=test-results.xml -n auto --dist=loadscope --max-worker-restart=3"
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
junit_duration_report = "call"
log_cli_level = "INFO"

# Logging configuration
log_file = "logs/pytest.log"
log_file_level = "DEBUG"
log_file_format = "%(asctime)s [%(levelname)8s] %(name)s:%(lineno)s %(message)s"
log_file_date_format = "%Y-%m-%d %H:%M:%S"
# Filter warnings
filterwarnings = [
    "ignore::UserWarning:pydantic._internal._fields",
    "ignore::DeprecationWarning",
    "ignore:coroutine 'AsyncMockMixin\\._execute_mock_call' was never awaited:RuntimeWarning",
    "ignore:DI CONTAINER VIOLATIONS DETECTED:UserWarning",
]
# To run integration tests, use: pytest -m integration
# To run command tests, use: pytest -m command
# To run session tests, use: pytest -m session
# To run backend tests, use: pytest -m backend
# To run DI tests, use: pytest -m di
# To run tests without global mock, use: pytest -m no_global_mock
markers = [
    "integration: marks tests as integration tests (deselect with '-m \"not integration\"')",
    "unit: marks tests as unit tests",
    "network: marks tests that require network access (deselect with '-m \"not network\"')",
    "regression: marks tests as regression tests",
    "backends: marks tests that need specific backends to be initialized",
    "backend: marks tests that need a specific backend to be initialized",
    "custom_backend_mock: marks tests that use custom backend mocking strategies",
    "httpx_mock: marks tests that use httpx mocking (provided by pytest-httpx plugin)",
    "no_global_mock: marks tests that should not use global mocking",
    "command: marks tests related to command handling",
    "session: marks tests related to session state management",
    "di: marks tests that use the dependency injection architecture",
    "loop_detection: marks tests related to loop detection",
    "multimodal: marks tests related to multimodal content",
    "quality: Tests that check code quality (linting, formatting)",
]


[tool.mdformat]
# Disable automatic line wrapping for Markdown files to match CI expectations
wrap = 0


